{
  "cliArguments": {
    "args": {
      "description": "Object array to pass into this script.",
      "values": [
        { "array": "An array of JSON formatted objects." }
      ]
    },
    "src": {
      "description": "The JavaScript code to execute.",
      "values": [
        { "string": "A valid JavaScript script." }
      ]
    }
  },
  "description": "Executes JavaScript in the context of the currently selected frame or window.",
  "examples": [
    {
      "description": "Executes script to change an element value, from [document] level",
      "literalExample": "execute script {document.getElementById('input_enabled').setAttribute('value', 'foo bar')}",
      "actionExample": {
        "actionType": "ExecuteScript",
        "argument": "{document.getElementById('input_enabled').setAttribute('value', 'foo bar')}"
      }
    },
    {
      "description": "Executes script to click on an element from [Action Rule] level.",
      "literalExample": "execute script {arguments[0].click();} on {click_button} using {id}",
      "actionExample": {
        "actionType": "ExecuteScript",
        "argument": "{arguments[0].click();}",
        "elementToActOn": "click_button",
        "locator": "Id"
      }
    },
    {
      "description": "Executes script to scroll the page document, from [document] level with additional arguments.",
      "literalExample": "execute script {{$ --src:window.scrollTo(arguments[0], arguments[1]); --args:[0, 100]}}",
      "actionExample": {
        "actionType": "ExecuteScript",
        "argument": "{{$ --src:window.scrollTo(arguments[0], arguments[1]); --args:[0, 100]}}"
      }
    },
    {
      "description": "Scrolls a mobile page with [up] direction.",
      "literalExample": "execute script {{$ --src:mobile:scroll --args:[{'direction':'up'}]}}",
      "actionExample": {
        "actionType": "ExecuteScript",
        "argument": "{{$ --src:mobile:scroll --args:[{'direction':'up'}]}}"
      }
    },
    {
      "description": "Check the element under extraction. This action applies on current element when using extraction rules. This action assumes the element already found and will inject it into the script. For an instance, instead of document.findElementById('id').checked=true; you will provide only the part of the script after the '.' - .checked=true; because the element which is now under extraction was already found and will be injected into your code.",
      "literalExample": "extract from page on {//body}\\n    < column {inner_text} on {.//input[@id='input_selected']}\\n        > execute script {.checked=false;}",
      "actionExample": {
        "actionType": "ExtractFromDom"
      },
      "extractionExample": {
        "rootElementToExtractFrom": "//input[@id='input_selected']",
        "elementsToExtract": [
          {
            "key": "inner_text",
            "actions": [
              {
                "actionType": "ExecuteScript",
                "argument": ".checked=false;"
              }
            ]
          }
        ]
      }
    }
  ],
  "name": "ExecuteScript",
  "pluginType": "Action",
  "properties": {
    "elementToActOn": "The locator value by which the element will be found.",
    "locator": "The locator type by which the element will be found.",
    "argument": "Plugin conditions and additional information."
  },
  "protocol": {
    "endpoint": "/session/{session-id}/execute/sync",
    "w3c": "https://www.w3.org/TR/webdriver/#execute-script"
  },
  "scope": [ "web", "mobile-web", "mobile-native" ],
  "summary": "Executes JavaScript in the context of the currently selected frame or window."
}
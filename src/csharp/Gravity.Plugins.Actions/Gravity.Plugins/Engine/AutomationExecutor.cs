/*
 * CHANGE LOG - keep only last 5 threads
 * 
 * RESOURCES
 */
using Gravity.Abstraction.WebDriver;
using Gravity.Plugins.Base;
using Gravity.Plugins.Contracts;
using Gravity.Plugins.Extensions;
using Newtonsoft.Json;
using OpenQA.Selenium;
using OpenQA.Selenium.Extensions;
using OpenQA.Selenium.Mock;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace Gravity.Plugins.Engine
{
    public class AutomationExecutor
    {
        // constants: automation context
        private const string LastReference = "LastReference";
        private const string OnSession = "OnSession";
        private const string Executor = "Executor";
        private const string Factory = "Factory";
        private const string Response = "Response";
        private const string LastPlugin = "LastPlugin";
        private const string Initialized = "Initialized";
        private const string DataRow = "DataRow";

        // members: settings
        private readonly ParallelOptions parallelOptions;
        private readonly LoginManager loginManager = new LoginManager();

        // members: meta data
        private readonly ConcurrentDictionary<string, OrbitResponse> responses;

        #region *** constructors       ***
        /// <summary>
        /// Creates a new instance of <see cref="Executor"/>.
        /// </summary>
        public AutomationExecutor()
            : this(automation: default)
        { }

        /// <summary>
        /// Creates a new instance of <see cref="Executor"/>.
        /// </summary>
        /// <param name="automation">A collection of <see cref="WebAutomation"/> to execute.</param>
        public AutomationExecutor(WebAutomation automation)
        {
            // setup: members
            responses = new ConcurrentDictionary<string, OrbitResponse>();
            parallelOptions = new ParallelOptions
            {
                MaxDegreeOfParallelism = automation.EngineConfiguration.MaxParallel
            };

            // setup: properties
            Automations = GetAutomations(byAutomation: automation);
            PluginFactory ??= new PluginFactory(automation);

            // setup: login
            loginManager
                .Login(automation.Authentication.UserName, automation.Authentication.Password)
                .GetAwaiter()
                .GetResult();
        }
        #endregion

        #region *** properties         ***
        /// <summary>
        /// Gets a list of all <see cref="IWebDriver"/> in the application domain.
        /// </summary>
        public static IDictionary<string, IWebDriver> Drivers { get; } = new ConcurrentDictionary<string, IWebDriver>();

        /// <summary>
        /// Gets or sets the collection of <see cref="WebAutomation"/> to execute.
        /// </summary>
        public IEnumerable<WebAutomation> Automations { get; set; }

        /// <summary>
        /// Gets or sets the <see cref="Engine.PluginFactory"/> used by this <see cref="AutomationExecutor"/>.
        /// </summary>
        public PluginFactory PluginFactory { get; set; }

        /// <summary>
        /// Gets a collection of <see cref="ComposedResponse"/> generated by this <see cref="AutomationExecutor"/>.
        /// </summary>
        public IDictionary<string, OrbitResponse> Responses => responses;
        #endregion

        #region *** execute automation ***
        /// <summary>
        /// Executes <see cref="Automations"/> collection generated by this instance.
        /// </summary>
        /// <returns><see cref="WebAutomation"/> execution results.</returns>
        public IDictionary<string, OrbitResponse> Execute()
        {
            // iterate automation requests
            Parallel.ForEach(Automations, parallelOptions, (automation)
                => DoExecute(automation, actions: automation.Actions, parameters: Array.Empty<object>()));

            // process response
            return responses;
        }

        /// <summary>
        /// Executes <see cref="WebAutomation"/> instance.
        /// </summary>
        /// <param name="automation"><see cref="WebAutomation"/> to execute.</param>
        /// <returns><see cref="WebAutomation"/> execution results.</returns>
        public IDictionary<string, OrbitResponse> Execute(WebAutomation automation)
        {
            return DoExecute(
                automation,
                actions: automation.Actions,
                parameters: Array.Empty<object>());
        }

        /// <summary>
        /// Explicitly executes an <see cref="ActionRule"/> based on a given <see cref="WebAutomation"/> instance.
        /// </summary>
        /// <param name="automation"><see cref="WebAutomation"/> instance to set actions on.</param>
        /// <param name="action">A collection of <see cref="ActionRule"/> to execute.</param>
        /// <returns><see cref="WebAutomation"/> execution results.</returns>
        public IDictionary<string, OrbitResponse> Execute(WebAutomation automation, ActionRule action)
        {
            return DoExecute(
                automation,
                actions: new[] { action },
                parameters: Array.Empty<object>());
        }

        /// <summary>
        /// Explicitly executes an <see cref="ActionRule"/> based on a given <see cref="WebAutomation"/> instance.
        /// </summary>
        /// <param name="automation"><see cref="WebAutomation"/> instance to set actions on.</param>
        /// <param name="action">A collection of <see cref="ActionRule"/> to execute.</param>
        /// <param name="parameters">Perform method parameters list excluding <see cref="ActionRule"/> parameter type.</param>
        /// <returns><see cref="WebAutomation"/> execution results.</returns>
        public IDictionary<string, OrbitResponse> Execute(
            WebAutomation automation, ActionRule action, object[] parameters)
        {
            return DoExecute(automation, actions: new[] { action }, parameters);
        }

        /// <summary>
        /// Explicitly executes a collection of <see cref="ActionRule"/> based on a given <see cref="WebAutomation"/> instance.
        /// </summary>
        /// <param name="automation"><see cref="WebAutomation"/> instance to set actions on.</param>
        /// <param name="actions">A collection of <see cref="ActionRule"/> to execute.</param>
        /// <returns><see cref="WebAutomation"/> execution results.</returns>
        public IDictionary<string, OrbitResponse> Execute(
            WebAutomation automation, IEnumerable<ActionRule> actions)
        {
            return DoExecute(automation, actions, parameters: Array.Empty<object>());
        }

        /// <summary>
        /// Explicitly executes a collection of <see cref="ActionRule"/> based on a given <see cref="WebAutomation"/> instance.
        /// </summary>
        /// <param name="automation"><see cref="WebAutomation"/> instance to set actions on.</param>
        /// <param name="actions">A collection of <see cref="ActionRule"/> to execute.</param>
        /// <param name="parameters">Perform method parameters list excluding <see cref="ActionRule"/> parameter type.</param>
        /// <returns><see cref="WebAutomation"/> execution results.</returns>
        public IDictionary<string, OrbitResponse> Execute(
            WebAutomation automation, IEnumerable<ActionRule> actions, object[] parameters)
        {
            return DoExecute(automation, actions, parameters);
        }

        // execute routine
        private IDictionary<string, OrbitResponse> DoExecute(
            WebAutomation automation, IEnumerable<ActionRule> actions, object[] parameters)
        {
            // setup
            Setup(automation);

            // recursion
            foreach (var action in actions)
            {
                ExecuteAction(automation, action, parameters);
            }

            // process response            
            var composed = (ComposedResponse)automation.Context[Response];
            responses[composed.OnSession] = composed.GetResponse();

            // return results
            return responses;
        }

        // executes an action rule, including sub actions routine (recursive)
        private void ExecuteAction(WebAutomation automation, ActionRule action, object[] parameters)
        {
            // setup
            var reference = (int)automation.Context[LastReference];
            action.Reference = reference++;
            automation.Context[LastReference] = reference;

            // execution pipeline
            ExecuteActionSingle(automation, action, parameters);

            // exit condition
            if (!action.Actions.Any() || !action.ExecuteSubActions())
            {
                return;
            }

            // recursion
            foreach (var onAction in action.Actions)
            {
                ExecuteAction(automation, action: onAction, parameters);
            }
        }

        private void ExecuteActionSingle(WebAutomation automation, ActionRule action, object[] parameters)
        {
            var stopwatch = new Stopwatch();
            stopwatch.Start();
            try
            {
                // setup
                var isOnSession = automation.Context.ContainsKey(OnSession)
                    && !string.IsNullOrEmpty($"{automation.Context[OnSession]}");

                // driver
                var driver = isOnSession
                    ? Drivers[$"{automation.Context[OnSession]}"]
                    : SetupDriver(automation);

                // extract factory
                var factory = automation.Context[Factory] as PluginFactory;

                // execute
                factory.ConstructorParameters = new object[] { automation, driver };
                var plugin = factory.Factor(action).Execute(parameters);

                // update factory
                automation.Context[Factory] = factory;
                automation.Context[LastPlugin] = plugin;
            }
            catch (Exception e) when (e != null)
            {
                AddException(automation, action, e);
            }
            finally
            {
                AddPerformancePoint(automation, action, stopwatch);
                AddResults(automation);
            }
        }

        // automation request state updates & setups
        private void Setup(WebAutomation automation)
        {
            // setup conditions
            var isInitialized = automation.Context.ContainsKey(Initialized) && (bool)automation.Context[Initialized];
            var isLastReference = automation.Context.ContainsKey(LastReference);
            var isExecutor = automation.Context.ContainsKey(Executor) && automation.Context[Executor] != default;
            var isFactory = automation.Context.ContainsKey(Factory) && automation.Context[Factory] != default;
            var isResponse = automation.Context.ContainsKey(Response) && automation.Context[Response] != default;

            // exit conditions
            if (isInitialized)
            {
                return;
            }

            // setup
            if (!isLastReference)
            {
                automation.Context[LastReference] = 0;
            }
            if (!isExecutor)
            {
                automation.Context[Executor] = this;
            }
            if (!isFactory)
            {
                automation.Context[Factory] = new PluginFactory(automation);
            }
            if (!isResponse)
            {
                automation.Context[Response] = new ComposedResponse(automation);
            }

            // update state
            automation.Context[Initialized] = true;
        }

        private void AddResults(WebAutomation automation)
        {
            // extract composed object
            var composed = automation.Context[Response] as ComposedResponse;
            var plugin = automation.Context.ContainsKey(LastPlugin)
                ? automation.Context[LastPlugin] as Plugin
                : null;

            // setup conditions
            var isOnSession = !string.IsNullOrEmpty(composed.OnSession);

            // apply data
            composed.OnSession = isOnSession ? composed.OnSession : $"{automation.Context[OnSession]}";
            composed.Exceptions.AddRange(plugin?.Exceptions);
            composed.Extractions.AddRange(plugin?.Extractions);
            composed.PerformancePoints.AddRange(plugin?.PerformancePoints);

            // update state
            automation.Context[Response] = composed;
        }

        private void AddPerformancePoint(WebAutomation automation, ActionRule action, Stopwatch stopwatch)
        {
            stopwatch.Stop();

            // setup
            var plugin = automation.Context.ContainsKey(LastPlugin)
                ? automation.Context[LastPlugin] as Plugin
                : default;

            // exit conditions
            if (plugin == default)
            {
                return;
            }

            // create performance point
            var point = new OrbitPerformancePoint
            {
                Action = action.Action,
                ActionReference = action.Reference,
                RepeatReference = action.RepeatReference,
                Time = stopwatch.Elapsed.TotalMilliseconds
            };

            // attach > update
            plugin.PerformancePoints ??= new ConcurrentBag<OrbitPerformancePoint>();
            plugin.PerformancePoints.Add(point);
            automation.Context[LastPlugin] = plugin;

            stopwatch.Reset();
        }

        private void AddException(WebAutomation automation, ActionRule action, Exception exception)
        {
            // setup
            var plugin = automation.Context.ContainsKey(LastPlugin)
                ? automation.Context[LastPlugin] as Plugin
                : default;

            // exit conditions
            if (plugin == default)
            {
                return;
            }

            // create exception
            var orbitException = new OrbitException
            {
                Action = action.Action,
                ActionReference = action.Reference
            };
            orbitException.Exception = exception.InnerException ?? exception;

            // attach > update
            plugin.Exceptions ??= new ConcurrentBag<OrbitException>();
            plugin.Exceptions.Add(orbitException);
            automation.Context[LastPlugin] = plugin;
        }
        #endregion

        #region *** utilities          ***
        // generates all web automation to executed, based on the given request(s)
        private IEnumerable<WebAutomation> GetAutomations(WebAutomation byAutomation)
        {
            // exit conditions
            if (byAutomation?.DataSource?.Source == default)
            {
                return new[] { byAutomation };
            }

            // setup
            var dataTable = new DataTable().Load(dataSource: byAutomation.DataSource);
            var automation = JsonConvert.SerializeObject(byAutomation);
            var automations = automation.FromTable(dataTable);

            // add data-rows
            var results = new List<WebAutomation>();
            foreach (var (s, d) in automations)
            {
                var au = JsonConvert.DeserializeObject<WebAutomation>(s);
                au.DataSource = null;
                au.Context[DataRow] = d;

                results.Add(au);
            }
            return results;
        }
        #endregion

        #region *** driver factory     ***
        // setup a new or existing web-driver for the current executor instance
        private IWebDriver SetupDriver(WebAutomation automation)
        {
            // default
            if (automation.DriverParams == default || automation.DriverParams.Keys.Count == 0)
            {
                return UpdateState(automation, driver: new MockWebDriver());
            }

            // setup
            var driverParamsJson = JsonConvert.SerializeObject(automation.DriverParams);

            // use existing
            const string PATTERN = @"(?i)(""|')driver(""|'):(\s+)?(""|')[a-z,A-Z]+(""|')";
            var useExisting = !Regex.IsMatch(driverParamsJson, PATTERN, RegexOptions.IgnoreCase);
            if (useExisting)
            {
                return Drivers
                    .FirstOrDefault(k => k.Key.Equals(driverParamsJson, StringComparison.OrdinalIgnoreCase))
                    .Value;
            }

            // create driver
            var driver = new DriverFactory(driverParamsJson).Create();

            // set timeouts
            var p = automation.EngineConfiguration.LoadTimeout;
            var e = automation.EngineConfiguration.SearchTimeout;

            WrappedAction(() => driver.Manage().Timeouts().PageLoad = TimeSpan.FromMilliseconds(p));
            WrappedAction(() => driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromMilliseconds(e));

            // results
            return UpdateState(automation, driver);
        }

        // general try/catch for void action with warning
        private void WrappedAction(Action factory)
        {
            try
            {
                factory.Invoke();
            }
            catch (Exception e) when (e != null)
            {
                // ignore exceptions
            }
        }

        // update state
        private IWebDriver UpdateState(WebAutomation automation, IWebDriver driver)
        {
            // extract session id
            var id = $"{driver.GetSession()}";

            // apply to collection & return current driver
            Drivers[id] = driver;
            automation.Context[OnSession] = id;

            // results
            return driver;
        }
        #endregion
    }
}
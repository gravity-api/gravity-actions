{
  "cliArguments": {
    "extractions": {
      "description": "Comma separated, zero-based index of the extractions to execute, under your extraction rule collection. Leaving this value empty, will execute all PageSource based extractions. Each extraction will be returned under a separate extraction results.",
      "value": "0,1,4"
    }
  },
  "description": "Executes the extraction rules collection provided under this WebAutomation and return or populates the data collected. Due to the nature of this action, it supports only XPath locator. This action will executes the extraction on the page source.",
  "examples": [
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "key": "data"
          }
        ]
      },
      "description": "Extracts the inner text of all root elements, found in the page source.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "regularExpression": "foo bar",
            "key": "data"
          }
        ]
      },
      "description": "Extracts the inner text of all root elements, found in the page source and apply a pattern on it.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "elementAttributeToActOn": "class",
            "key": "data"
          }
        ]
      },
      "description": "Extracts a value from a given attribute for all root elements, found in the page source.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "elementAttributeToActOn": "class",
            "regularExpression": "foo bar",
            "key": "data"
          }
        ]
      },
      "description": "Extracts a value from a given attribute for all root elements, found in the page source and apply a pattern on it.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "elementToActOn": "./span[1]",
            "key": "data"
          }
        ]
      },
      "description": "Extracts the inner text of the given element under all root elements, found in the page source.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "elementToActOn": "./span[1]",
            "regularExpression": "foo bar",
            "key": "data"
          }
        ]
      },
      "description": "Extracts the inner text of the given element under all root elements, found in the page source and apply a pattern on it.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "elementToActOn": "./span[1]",
            "elementAttributeToActOn": "class",
            "key": "data"
          }
        ]
      },
      "description": "Extracts the attribute value of the given element under all root elements, found in the page source.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "elementToActOn": "./span[1]",
            "elementAttributeToActOn": "class",
            "regularExpression": "foo bar",
            "key": "data"
          }
        ]
      },
      "description": "Extracts the attribute value of the given element under all root elements, found in the page source and apply a pattern on it.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "elementAttributeToActOn": "html",
            "key": "data"
          }
        ]
      },
      "description": "Extracts the outer HTML of all root elements.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "elementToActOn": "./span[1]",
            "elementAttributeToActOn": "html",
            "key": "data"
          }
        ]
      },
      "description": "Extracts the outer HTML of the given element under all root elements.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "elementToActOn": "//p[1]",
            "key": "data"
          }
        ]
      },
      "description": "Extracts inner text of the given absolute element for all root elements (will be the same for all extractions on the same page).",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "elementToActOn": "//p[1]",
            "elementAttributeToActOn": "id",
            "key": "data"
          }
        ]
      },
      "description": "Extracts the attribute value of the given absolute element for all root elements (will be the same for all extractions on the same page).",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "SQLServer",
          "source": "Data Source=.\\SQLEXPRESS;Initial Catalog=FooDatabase;Integrated Security=True",
          "repository": "FooTable"
        },
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "key": "data"
          }
        ]
      },
      "description": "Extracts inner text of all root elements and save it to SQL Server. The saving will be done when the extraction rule execution completed. If the database or repository does not exists, Gravity will create them.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "SQLServer",
          "source": "Data Source=.\\SQLEXPRESS;Initial Catalog=FooDatabase;Integrated Security=True",
          "repository": "FooTable",
          "writePerEntity": true
        },
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "key": "data"
          }
        ]
      },
      "description": "Extracts inner text of all root elements and save it to SQL Server. The saving will be done when the content entry execution completed. If the database or repository does not exists, Gravity will create them.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "CSV",
          "source": "Data/foo.csv"
        },
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "key": "data"
          }
        ]
      },
      "description": "Extracts inner text of all root elements and save it to a CSV file. The saving will be done when the extraction rule execution completed. If the file or folder(s) does not exists, Gravity will create them.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "CSV",
          "source": "Data/foo.csv",
          "writePerEntity": true
        },
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "key": "data"
          }
        ]
      },
      "description": "Extracts inner text of all root elements and save it to a CSV file. The saving will be done when the content entry execution completed. If the file or folder(s) does not exists, Gravity will create them.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "JSON",
          "source": "Data/foo.json"
        },
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "key": "data"
          }
        ]
      },
      "description": "Extracts inner text of all root elements and save it to a JSON file. The saving will be done when the extraction rule execution completed. If the file or folder(s) does not exists, Gravity will create them.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "JSON",
          "source": "Data/foo.json",
          "writePerEntity": true
        },
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "key": "data"
          }
        ]
      },
      "description": "Extracts inner text of all root elements and save it to a JSON file. The saving will be done when the content entry execution completed. If the file or folder(s) does not exists, Gravity will create them.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "XML",
          "source": "Data/foo.xml"
        },
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "key": "data"
          }
        ]
      },
      "description": "Extracts inner text of all root elements and save it to a XML file. The saving will be done when the extraction rule execution completed. If the file or folder(s) does not exists, Gravity will create them.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "XML",
          "source": "Data/foo.xml",
          "writePerEntity": true
        },
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "key": "data"
          }
        ]
      },
      "description": "Extracts inner text of all root elements and save it to a XML file. The saving will be done when the content entry execution completed. If the file or folder(s) does not exists, Gravity will create them.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "RestApi",
          "source": "http://foo-bar.io/data"
        },
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "key": "data"
          }
        ]
      },
      "description": "Extracts inner text of all root elements and send it to a Rest API using HTTP post. The saving will be done when the extraction rule execution completed.",
      "literalExample": "not supported by literal engine."
    },
    {
      "actionExample": {
        "actionType": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "XML",
          "source": "Data/foo.xml",
          "writePerEntity": true
        },
        "pageSource": true,
        "rootElementToExtractFrom": "//div",
        "elementsToExtract": [
          {
            "key": "data"
          }
        ]
      },
      "description": "Extracts inner text of all root elements and send it to a Rest API using HTTP post. The saving will be done when the content entry execution completed.",
      "literalExample": "not supported by literal engine."
    }
  ],
  "name": "ExtractFromSource",
  "pluginType": "Action",
  "properties": {
    "argument": "Plugin conditions and additional information."
  },
  "protocol": {
    "endpoint": "none",
    "w3c": "https://www.w3.org/TR/webdriver/#actions"
  },
  "scope": [ "web", "mobile-web" ],
  "summary": "Executes the extraction rule collection under provided under WebAutomation.",
  "testOn": "https://gravitymvctestapplication.azurewebsites.net/instructor"
}
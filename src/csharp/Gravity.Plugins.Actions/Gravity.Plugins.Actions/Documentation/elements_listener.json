{
  "cliArguments": {
    "interval": {
      "description": "The time to wait between each listener cycle. Please note, short interval time might slow your automation.",
      "values": [
        { "any number": "Integer value which represent the interval time in milliseconds." },
        { "time": "A valid [TimeSpan] string which represent the interval time as a time component." }
      ]
    },
    "timeout": {
      "description": "The time to wait before terminating the listener. Please note, if this time is shorter than your automation run time, the listener might stop before intended.",
      "values": [
        { "any number": "Integer value which represent the timeout time in milliseconds." },
        { "time": "A valid [TimeSpan] string which represent the timeout as a time component." }
      ]
    }
  },
  "description": "Listens to element or elements exists state and perform action or actions when available. Use this method to dispose of unexpected banners which might block the user interface. The listener stops when the driver is disposed or after a given timeout. If no [Actions] provided, the listener will click the element once available.",
  "examples": [
    {
      "actionExample": {
        "actionType": "ElementsListener",
        "argument": "500",
        "onElement": "//div[./strong[contains(.,'Random Element.')]]"
      },
      "description": "Every 500ms, the [ElementsListener] will search for the [onElement]. If exists, it will be clicked. This will apply for all the elements found by the given locator.",
      "literalExample": "elements listener {500} on {//div[./strong[contains(.,'Random Element.')]]}"
    },
    {
      "actionExample": {
        "actionType": "ElementsListener",
        "argument": "{{$ --interval:500 --timeout:30000}}",
        "onElement": "//div[./strong[contains(.,'Random Element.')]]"
      },
      "description": "Every 500ms and for total time of 30000ms, the [ElementsListener] will search for the [onElement]. If exists, it will be clicked. This will apply for all the elements found by the given locator.",
      "literalExample": "elements listener {{$ --interval:500 --timeout:30000}} on {//div[./strong[contains(.,'Random Element.')]]}"
    },
    {
      "actionExample": {
        "actionType": "ElementsListener",
        "argument": "{{$ --interval:00:00:01 --timeout:00:00:30}}",
        "onElement": "//div[./strong[contains(.,'Random Element.')]]",
        "actions": [
          {
            "actionType": "SendKeys",
            "argument": "dismissed",
            "onElement": "input_enabled",
            "locator": "Id"
          },
          {
            "actionType": "Click",
            "onElement": "//div[./strong[contains(.,'Random Element.')]]"
          }
        ]
      },
      "description": "Every 1sec and for total time of 30sec, the [ElementsListener] will search for the [onElement]. If exists, sub actions will be executed. This will apply for all the elements found by the given locator.",
      "literalExample": "elements listener {{$ --interval:500 --timeout:30000}} on {//div[./strong[contains(.,'Random Element.')]]}\\n    > type {dismissed} into {input_enabled} using {id}\\n    > click on {//div[./strong[contains(.,'Random Element.')]]}"
    }
  ],
  "name": "ElementsListener",
  "pluginType": "Action",
  "properties": {
    "argument": "The amount of milliseconds interval between each elements search.",
    "onElement": "The locator value by which the element will be found.",
    "locator": "The locator type by which the element will be found."
  },
  "protocol": {
    "endpoint": "none",
    "w3c": "https://www.w3.org/TR/webdriver/#actions"
  },
  "scope": [ "web", "mobile-web", "mobile-native" ],
  "summary": "Listens to element or elements enabled state and perform click when available.",
  "testOn": "https://gravitymvctestapplication.azurewebsites.net/instructor"
}
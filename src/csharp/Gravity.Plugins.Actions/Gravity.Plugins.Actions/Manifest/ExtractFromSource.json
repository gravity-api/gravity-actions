{
  "cliArguments": {
    "extractions": {
      "description": "Comma separated, zero-based index of the extractions to execute, under your extraction rule collection. Leaving this value empty, will execute all PageSource based extractions. Each extraction will be returned under a separate extraction results.",
      "value": "0,1,4"
    }
  },
  "description": "Executes the extraction rules collection provided under this WebAutomation and return or populates the data collected. Due to the nature of this action, it supports only XPath locator. This action will executes the extraction on the page source.",
  "examples": [
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "onRootElements": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName"
          }
        ]
      },
      "description": "Extract all students First Name into a table with FirstName column.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\n    < column {FirstName}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "onRootElements": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName",
            "regularExpression": "^\\w{1}"
          }
        ]
      },
      "description": "Extract only the first character from all students First Name into a table with FirstName column.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\n    < column {FirstName} filter {^\\w{1}}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "onRootElements": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName",
            "onAttribute": "id"
          }
        ]
      },
      "description": "Extract the HTML ``id`` property, from all students First Name HTML element, into a table with FirstName column.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\n    < column {FirstName} from {id}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "onRootElements": "//tbody/tr",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName",
            "onElement": ".//td[contains(@id,'student_first_name')]"
          },
          {
            "key": "LastName",
            "onElement": ".//td[contains(@id,\"student_last_name\")]"
          }
        ]
      },
      "description": "Extract all students First Name and Last Name into a table with FirstName and Last Name columns.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\n    < column {FirstName} take {.//td[contains(@id,'student_first_name')]}\n    < column {LastName} take {.//td[contains(@id,\"student_last_name\")]}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "onRootElements": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName",
            "onAttribute": "html"
          }
        ]
      },
      "description": "Extract the HTML Markup of all students First Name HTML element, into a table with FirstName column.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\n    < column {FirstName} from {html}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "SQLServer",
          "source": "Data Source=.\\SQLEXPRESS;Initial Catalog=FooDatabase;Integrated Security=True",
          "repository": "StudentsTable"
        },
        "onRootElement": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName"
          }
        ]
      },
      "description": "Extract all students First Name into a table with FirstName column and save it to SQL Server. The saving will be done when the extraction rule execution completed.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\\n    < column {FirstName}\n    save {StudentsTable} on {Data Source=.\\SQLEXPRESS;Initial Catalog=FooDatabase;Integrated Security=True} using {SQLServer}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "SQLServer",
          "source": "Data Source=.\\SQLEXPRESS;Initial Catalog=FooDatabase;Integrated Security=True",
          "repository": "StudentsTable",
          "writePerEntry": true
        },
        "onRootElement": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName"
          }
        ]
      },
      "description": "Extract all students First Name into a table with FirstName column and save it to SQL Server. The saving will be done when the content entry execution completed.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\\n    < column {FirstName}\n    save {{$ --repository:StudentsTable --write_per_entry}} on {Data Source=.\\SQLEXPRESS;Initial Catalog=FooDatabase;Integrated Security=True} using {SQLServer}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "CSV",
          "source": "Data/StudentsTable.csv"
        },
        "onRootElement": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName"
          }
        ]
      },
      "description": "Extract all students First Name into a table with FirstName column and save it a CSV file. The saving will be done when the extraction rule execution completed.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\n    < column {FirstName}\n    < save on {Data/StudentsTable.csv} using {csv}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "CSV",
          "source": "Data/StudentsTable.csv",
          "writePerEntry": true
        },
        "onRootElement": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName"
          }
        ]
      },
      "description": "Extract all students First Name into a table with FirstName column and save it to a CSV file. The saving will be done when the content entry execution completed.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\n    < column {FirstName}\n    < save {{$ --write_per_entry}} on {Data/StudentsTable.csv} using {csv}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "JSON",
          "source": "Data/StudentsTable.json"
        },
        "onRootElement": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName"
          }
        ]
      },
      "description": "Extract all students First Name into a table with FirstName column and save it a JSON file. The saving will be done when the extraction rule execution completed.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\n    < column {FirstName}\n    < save on {Data/StudentsTable.json} using {json}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "JSON",
          "source": "Data/StudentsTable.json",
          "writePerEntry": true
        },
        "onRootElement": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName"
          }
        ]
      },
      "description": "Extract all students First Name into a table with FirstName column and save it to a JSON file. The saving will be done when the content entry execution completed.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\n    < column {FirstName}\n   < save {{$ --write_per_entry}} on {Data/StudentsTable.json} using {json}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "XML",
          "source": "Data/StudentsTable.xml"
        },
        "onRootElement": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName"
          }
        ]
      },
      "description": "Extract all students First Name into a table with FirstName column and save it to XML file. The saving will be done when the extraction rule execution completed.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\n   < column {FirstName}\n    < save on {Data/StudentsTable.xml} using {xml}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "XML",
          "source": "Data/StudentsTable.xml",
          "writePerEntry": true
        },
        "onRootElement": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName"
          }
        ]
      },
      "description": "Extract all students First Name into a table with FirstName column and save it to XML file. The saving will be done when the content entry execution completed.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\n   < column {FirstName}\n    < save {{$ --write_per_entry}} on {Data/StudentsTable.xml} using {xml}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "RestApi",
          "source": "http://www.@foo-bar.io/data"
        },
        "onRootElement": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName"
          }
        ]
      },
      "description": "Extract all students First Name into a table with FirstName column and send it to a Rest API using HTTP post. The saving will be done when the extraction rule execution completed.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\n    < column {FirstName}\n    < save on {http://www.@foo-bar.io/data} using {RestApi}"
    },
    {
      "actionExample": {
        "action": "ExtractFromSource"
      },
      "extractionExample": {
        "dataSource": {
          "type": "RestApi",
          "source": "http://www.@foo-bar.io/data",
          "writePerEntity": true
        },
        "onRootElement": "//td[contains(@id,'student_first_name')]",
        "pageSource": true,
        "onElements": [
          {
            "key": "FirstName"
          }
        ]
      },
      "description": "Extract all students First Name into a table with FirstName column and send it to a Rest API using HTTP post. The saving will be done when the content entry execution completed.",
      "literalExample": "extract from source on {//td[contains(@id,'student_first_name')]}\n    < column {FirstName}\n    < save {{$ --write_per_entry}} on {http://www.@foo-bar.io/data} using {RestApi}"
    }
  ],
  "name": "ExtractFromSource",
  "pluginType": "Action",
  "properties": {
    "argument": "Plugin conditions and additional information."
  },
  "protocol": {
    "endpoint": "none",
    "w3c": "https://www.w3.org/TR/webdriver/#actions"
  },
  "scope": [ "web", "mobile-web" ],
  "summary": "Executes the extraction rule collection under provided under WebAutomation.",
  "testOn": "https://gravitymvctestapplication.azurewebsites.net/instructor"
}
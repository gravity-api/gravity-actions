{
  "cliArguments": {
    "eq": "Equals (=).",
    "ne": "Not equals (!= | <>).",
    "gt": "Greater than (>).",
    "ge": "Greater than or equal (>=).",
    "lt": "Less than (<).",
    "le": "Less than or equal (<=).",
    "match": "Returns true when string matches regex.",
    "notmatch": "Returns true when string does not match regex.",
    "url": "Takes the current page url as the actual result, ignoring onElement.",
    "title": "Takes the current page title as the actual result, ignoring onElement.",
    "count": "Takes the count of the elements found by onElement as the actual result.",
    "driver": "Takes the current web-driver implementation name.",
    "attribute": "boolean: Assert that element attribute matches regex.",
    "enabled": "boolean: Assert element [enabled] state.",
    "exists": "boolean: Assert element [exists] state.",
    "stale": "boolean: Assert element [stale] state.",
    "text": "boolean: Assert that element [inner-text] matches regex.",
    "visible": "boolean: Assert element [visible] state.",
    "selected": "boolean: Assert element [selected] state."
  },
  "description": "Asserts that a given value meets a condition. That value can be, for an instance, element text, element attribute, element status or current address. The results of the assertion evaluation will be returned in the response extractions. When asserting on elements state, this action will wait for the expected state until [ElementSearchingTimout] reached.",
  "examples": [
    {
      "description": "Asserts that [my_parameter] value equals [10].",
      "literalExample": "assert {{$ --parameter --eq:10}} on {my_parameter}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --parameter --eq:10}}",
        "onElement": "my_parameter"
      }
    },
    {
      "description": "Asserts that [my_parameter] value not equals [1].",
      "literalExample": "assert {{$ --parameter --ne:1}} on {my_parameter}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --parameter --ne:1}}",
        "onElement": "my_parameter"
      }
    },
    {
      "description": "Asserts that [my_parameter] value greater than [1].",
      "literalExample": "assert {{$ --parameter --eq:10}} on {my_parameter}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --parameter --gt:1}}",
        "onElement": "my_parameter"
      }
    },
    {
      "description": "Asserts that [my_parameter] value lower than [11].",
      "literalExample": "assert {{$ --parameter --lt:11}} on {my_parameter}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --parameter --lt:11}}",
        "onElement": "my_parameter"
      }
    },
    {
      "description": "Asserts that [my_parameter] value greater or equal [10].",
      "literalExample": "assert {{$ --parameter --ge:10}} on {my_parameter}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --parameter --ge:10}}",
        "onElement": "my_parameter"
      }
    },
    {
      "description": "Asserts that [my_parameter] value lower or equal [10].",
      "literalExample": "assert {{$ --parameter --le:10}} on {my_parameter}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --parameter --ge:10}}",
        "onElement": "my_parameter"
      }
    },
    {
      "description": "Asserts that [my_parameter] value match [^10$].",
      "literalExample": "assert {{$ --parameter --match:^10$}} on {my_parameter}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --parameter --match:^10$}}",
        "onElement": "my_parameter"
      }
    },
    {
      "description": "Asserts that [my_parameter] value not match [^1$].",
      "literalExample": "assert {{$ --parameter --not_match:^1$}} on {my_parameter}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --parameter --not_match:^1$}}",
        "onElement": "my_parameter"
      }
    },
    {
      "description": "Asserts that [class] attribute of an element equals [nav-link text-dark].",
      "literalExample": "assert {{$ --attribute --eq:btn btn-default}} from {class} on {ul > li:nth-child(1) > a} using {css selector}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --attribute --eq:nav-link text-dark}}",
        "onElement": "ul > li:nth-child(1) > a",
        "locator": "CssSelector",
        "onAttribute": "class"
      }
    },
    {
      "description": "Asserts that [class] attribute of an element not equals [btn-default btn].",
      "literalExample": "assert {{$ --attribute --ne:btn btn-default}} from {class} on {ul > li:nth-child(1) > a} using {css selector}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --attribute --ne:btn-default btn}}",
        "onElement": "p:nth-child(3) > a",
        "locator": "CssSelector",
        "onAttribute": "class"
      }
    },
    {
      "description": "Asserts that [class] attribute of an element matches [^btn btn-default$].",
      "literalExample": "assert {{$ --attribute --match:^btn btn-default$}} from {class} on {See the tutorial »} using {link text}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --attribute --match:^btn btn-default$}}",
        "onElement": "See the tutorial »",
        "locator": "LinkText",
        "onAttribute": "class"
      }
    },
    {
      "description": "Asserts that [class] attribute of an element not match [^btn-default btn$].",
      "literalExample": "assert {{$ --attribute --not_match:^btn-default btn$}} from {class} on {See the tutorial »} using {link text}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --attribute --not_match:^btn-default btn$}}",
        "onElement": "See the tutorial »",
        "locator": "LinkText",
        "onAttribute": "class"
      }
    },
    {
      "description": "Asserts that [number] attribute of an element is greater than [1].",
      "literalExample": "assert {{$ --attribute --gt:1}} from {number} on {#attribute_div} using {css selector}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --attribute --gt:1}}",
        "onElement": "#attribute_div",
        "locator": "CssSelector",
        "onAttribute": "number"
      }
    },
    {
      "description": "Asserts that [number] attribute of an element is lower than [1].",
      "literalExample": "assert {{$ --attribute --lt:1}} from {number} on {#attribute_div} using {css selector}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --attribute --lt:1}}",
        "onElement": "#attribute_div",
        "locator": "CssSelector",
        "onAttribute": "number"
      }
    },
    {
      "description": "Asserts that [number] attribute of an element is greater or equal than [1].",
      "literalExample": "assert {{$ --attribute --ge:1}} from {number} on {#attribute_div} using {css selector}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --attribute --ge:1}}",
        "onElement": "#attribute_div",
        "locator": "CssSelector",
        "onAttribute": "number"
      }
    },
    {
      "description": "Asserts that [number] attribute of an element is lower or equal than [1].",
      "literalExample": "assert {{$ --attribute --le:1}} from {number} on {#attribute_div} using {css selector}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --attribute --le:1}}",
        "onElement": "#attribute_div",
        "locator": "CssSelector",
        "onAttribute": "number"
      }
    },
    {
      "description": "Asserts that [//tbody/tr] elements count equals [7].",
      "literalExample": "assert {{$ --count --eq:7}} on {//tbody/tr}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --count --eq:7}}",
        "onElement": "//tbody/tr"
      }
    },
    {
      "description": "Asserts that [//tbody/tr] elements count not equals [10].",
      "literalExample": "assert {{$ --count --ne:10}} on {//tbody/tr}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --count --ne:10}}",
        "onElement": "//tbody/tr"
      }
    },
    {
      "description": "Asserts that [//tbody/tr] elements count matches [^\\d{1}$].",
      "literalExample": "assert {{$ --count --match:^\\d{1}$}} on {//tbody/tr}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --count --match:^\\d{1}$}}",
        "onElement": "//tbody/tr"
      }
    },
    {
      "description": "Asserts that [//tbody/tr] elements count not match [^1\\d+$].",
      "literalExample": "assert {{$ --count --not_match:^1\\d+$}} on {//tbody/tr}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --count --not_match:^1\\d+$}}",
        "onElement": "//tbody/tr"
      }
    },
    {
      "description": "Asserts that [//tbody/tr] elements count is greater than [1].",
      "literalExample": "assert {{$ --count --gt:1}} on {//tbody/tr}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --count --gt:1}}",
        "onElement": "//tbody/tr"
      }
    },
    {
      "description": "Asserts that [//tbody/tr] elements count is lower than [10].",
      "literalExample": "assert {{$ --count --lt:10}} on {//tbody/tr}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --count --lt:10}}",
        "onElement": "//tbody/tr"
      }
    },
    {
      "description": "Asserts that [//tbody/tr] elements count is greater or equal than [1].",
      "literalExample": "assert {{$ --count --ge:1}} on {//tbody/tr}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --count --ge:1}}",
        "onElement": "//tbody/tr"
      }
    },
    {
      "description": "Asserts that [//tbody/tr] elements count is lower or equal than [10].",
      "literalExample": "assert {{$ --count --le:1}} on {//tbody/tr}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --count --le:10}}",
        "onElement": "//tbody/tr"
      }
    },
    {
      "description": "Asserts that <input id=\"input_disabled\"> element is [disabled].",
      "literalExample": "assert {{$ --disabled}} on {input_disabled} using {id}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --disabled}}",
        "onElement": "input_disabled",
        "locator": "Id"
      }
    },
    {
      "description": "Asserts that [IWebDriver.FullName] equals [OpenQA.Selenium.Remote.RemoteWebDriver].",
      "literalExample": "assert {{$ --driver --eq:OpenQA.Selenium.Remote.RemoteWebDriver}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --driver --eq:OpenQA.Selenium.Remote.RemoteWebDriver}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.FullName] not equals [OpenQA.Selenium.Chrome.ChromeDriver].",
      "literalExample": "assert {{$ --driver --ne:OpenQA.Selenium.Chrome.ChromeDriver}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --driver --ne:OpenQA.Selenium.Chrome.ChromeDriver}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.FullName] matches [RemoteWebDriver].",
      "literalExample": "assert {{$ --driver --match:RemoteWebDriver}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --driver --match:RemoteWebDriver}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.FullName] not match [ChromeDriver].",
      "literalExample": "assert {{$ --driver --not_match:ChromeDriver}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --driver --not_match:ChromeDriver}}"
      }
    },
    {
      "description": "Asserts that <input id=\"input_enabled\"> element is [enabled].",
      "literalExample": "assert {{$ --enabled}} on {input_enabled} using {id}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --enabled}}",
        "onElement": "input_enabled",
        "locator": "Id"
      }
    },
    {
      "description": "Asserts that <input id=\"input_enabled\"> element is [exists].",
      "literalExample": "assert {{$ --exists}} on {input_enabled} using {id}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --exists}}",
        "onElement": "input_enabled",
        "locator": "Id"
      }
    },
    {
      "description": "Asserts that <input id=\"input_hidden\"> element is [hidden].",
      "literalExample": "assert {{$ --hidden}} on {input_hidden} using {id}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --hidden}}",
        "onElement": "input_hidden",
        "locator": "Id"
      }
    },
    {
      "description": "Asserts that <input id=\"no_element\"> element is [not_exists].",
      "literalExample": "assert {{$ --hidden}} on {input_hidden} using {id}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --not_exists}}",
        "onElement": "no_element",
        "locator": "Id"
      }
    },
    {
      "description": "Asserts that <input id=\"input_selected\"> element is [selected].",
      "literalExample": "assert {{$ --selected}} on {input_selected} using {id}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --selected}}",
        "onElement": "input_selected",
        "locator": "Id"
      }
    },
    {
      "description": "Asserts that <input id=\"input_not_selected\"> element is [not selected].",
      "literalExample": "assert {{$ --not_selected}} on {input_not_selected} using {id}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --not_selected}}",
        "onElement": "input_not_selected",
        "locator": "Id"
      }
    },
    {
      "description": "Asserts that <div id=\"for_stale_element\"> element is [stale].",
      "literalExample": "assert {{$ --stale}} on {input_selected} using {id}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --stale}}",
        "onElement": "for_stale_element",
        "locator": "Id"
      }
    },
    {
      "description": "Asserts that [text for testing] inner text equals [Foo Bar].",
      "literalExample": "assert {{$ --text --eq:Foo Bar}} on {text for testing} using {name}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --text --eq:Foo Bar}}",
        "onElement": "text for testing",
        "locator": "Name"
      }
    },
    {
      "description": "Asserts that [text for testing] inner text not equals [Bar Foo].",
      "literalExample": "assert {{$ --text --ne:Bar Foo}} on {text for testing} using {name}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --text --ne:Bar Foo}}",
        "onElement": "text for testing",
        "locator": "Name"
      }
    },
    {
      "description": "Asserts that [text for testing] inner text matches [^Foo Bar$].",
      "literalExample": "assert {{$ --text --match:^Foo Bar$}} on {text for testing} using {name}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --text --match:^Foo Bar$}}",
        "onElement": "text for testing",
        "locator": "Name"
      }
    },
    {
      "description": "Asserts that [text for testing] inner text not match [^Bar Foo$].",
      "literalExample": "not supported by literal engine.",
      "actionExample": {
        "action": "Assert",
        "argument": "assert {{$ --text --not_match:^Bar Foo$}} on {text for testing} using {name}",
        "onElement": "text for testing",
        "locator": "Name"
      }
    },
    {
      "description": "Asserts that [number for testing] inner text is greater than [1].",
      "literalExample": "assert {{$ --text --gt:1}} on {number for testing} using {name}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --text --gt:1}}",
        "onElement": "number for testing",
        "locator": "Name"
      }
    },
    {
      "description": "Asserts that [number for testing] inner text is lower than [100].",
      "literalExample": "assert {{$ --text --lt:100}} on {number for testing} using {name}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --text --lt:100}}",
        "onElement": "number for testing",
        "locator": "Name"
      }
    },
    {
      "description": "Asserts that [number for testing] inner text is greater or equal than [10].",
      "literalExample": "assert {{$ --text --ge:10}} on {number for testing} using {name}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --text --ge:10}}",
        "onElement": "number for testing",
        "locator": "Name"
      }
    },
    {
      "description": "Asserts that [number for testing] inner text is lower or equal than [10].",
      "literalExample": "assert {{$ --text --ge:10}} on {number for testing} using {name}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --text --le:10}}",
        "onElement": "number for testing",
        "locator": "Name"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Title] equals [UI Controls v10 - Contoso].",
      "literalExample": "assert {{$ --title --eq:UI Controls v10 - Contoso University}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --title --eq:UI Controls v10 - Contoso University}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Title] not equals [Contoso University - UI Controls v10].",
      "literalExample": "assert {{$ --title --ne:Contoso University - UI Controls v10}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --title --ne:Contoso University - UI Controls v10}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Title] matches [^UI Controls].",
      "literalExample": "assert {{$ --title --match:^UI Controls}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --title --match:^UI Controls}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Title] not match [UI Controls v10$].",
      "literalExample": "assert {{$ --title --not_match:UI Controls v10$}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --title --not_match:UI Controls v10$}}"
      }
    },
    {
      "description": "Assert that [IWebDriver.Title] filtered by [\\d+] regular expression, is greater than [1].",
      "literalExample": "assert {{$ --title --gt:1}} filter {\\d+}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --title --gt:1}}",
        "regularExpression": "\\d+"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Title] filtered by [\\d+] regular expression, is lower than [100].",
      "literalExample": "assert {{$ --title --gt:100}} filter {\\d+}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --title --lt:100}}",
        "regularExpression": "\\d+"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Title] filtered by [\\d+] regular expression is, greater or equal than [10].",
      "literalExample": "assert {{$ --title --ge:10}} filter {\\d+}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --title --ge:10}}",
        "regularExpression": "\\d+"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Title] filtered by [\\d+] regular expression, is lower or equal than [10].",
      "literalExample": "assert {{$ --title --ge:10}} filter {\\d+}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --title --le:10}}",
        "regularExpression": "\\d+"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Url] equals [https://gravitymvctestapplication.azurewebsites.net/course/].",
      "literalExample": "assert {{$ --url --eq:https://gravitymvctestapplication.azurewebsites.net/course/}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --url --eq:https://gravitymvctestapplication.azurewebsites.net/course/}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Url] not equals [https://gravitymvctestapplication.azurewebsites.net/].",
      "literalExample": "assert {{$ --title --ne:https://gravitymvctestapplication.azurewebsites.net/}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --url --ne:https://gravitymvctestapplication.azurewebsites.net/}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Url] matches [course/$].",
      "literalExample": "assert {{$ --url --match:course/$}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --url --match:course/$}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Url] not match [^course/].",
      "literalExample": "assert {{$ --title --not_match:^course/}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --url --not_match:^course/}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Url] filtered by [\\d+] regular expression, is greater than [1000].",
      "literalExample": "assert {{$ --title --gt:1000}} filter {\\d+}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --url --gt:1000}}",
        "regularExpression": "\\d+"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Url] filtered by [\\d+] regular expression, is lower than [2000].",
      "literalExample": "assert {{$ --url --lt:2000}} filter {\\d+}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --url --lt:2000}}",
        "regularExpression": "\\d+"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Url] filtered by [\\d+] regular expression, is greater or equal than [1045].",
      "literalExample": "assert {{$ --url --ge:1045}} filter {\\d+}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --url --ge:1045}}",
        "regularExpression": "\\d+"
      }
    },
    {
      "description": "Asserts that [IWebDriver.Url] filtered by [\\d+] regular expression, is lower or equal than [1045].",
      "literalExample": "assert {{$ --url --le:1045}} filter {\\d+}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --url --le:1045}}",
        "regularExpression": "\\d+"
      }
    },
    {
      "description": "Asserts that <input id=\"input_enabled\"> element is [visible].",
      "literalExample": "assert {{$ --visible}} on {input_enabled} using {id}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --visible}}",
        "onElement": "input_enabled",
        "locator": "Id"
      }
    },
    {
      "description": "Asserts that [IWebDriver.WindowHandles] count equals [1].",
      "literalExample": "assert {{$ --windows_count --eq:1}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --windows_count --eq:1}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.WindowHandles] count not equals [0].",
      "literalExample": "assert {{$ --windows_count --ne:0}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --windows_count --ne:0}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.WindowHandles] count matches [\\d{1}].",
      "literalExample": "assert {{$ --windows_count --match:\\d{1}}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --windows_count --match:\\d{1}}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.WindowHandles] count not match [1\\d+].",
      "literalExample": "{{$ --windows_count --not_match:1\\d+}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --windows_count --not_match:1\\d+}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.WindowHandles] count is greater than [0].",
      "literalExample": "assert {{$ --windows_count --gt:0}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --windows_count --gt:0}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.WindowHandles] count is lower than [10].",
      "literalExample": "assert {{$ --windows_count --lt:10}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --windows_count --lt:10}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.WindowHandles] count is greater or equal than [1].",
      "literalExample": "assert {{$ --windows_count --ge:1}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --windows_count --ge:1}}"
      }
    },
    {
      "description": "Asserts that [IWebDriver.WindowHandles] count is lower or equal than [1].",
      "literalExample": "assert {{$ --windows_count --le:1}}",
      "actionExample": {
        "action": "Assert",
        "argument": "{{$ --windows_count --le:1}}"
      }
    }
  ],
  "name": "Assert",
  "pluginType": "Action",
  "properties": {
    "argument": "The assertion condition, operator and expected value.",
    "onAttribute": "The element attribute from which to extract information for action execution. If not specified, information will be taken from the element inner text.",
    "onElement": "The locator value by which the element will be found.",
    "locator": "The locator type by which the element will be found.",
    "regularExpression": "A pattern by which the extracted information will be evaluated. Returns the first match."
  },
  "protocol": {
    "endpoint": "none",
    "w3c": "none"
  },
  "scope": [ "web", "mobile-web", "mobile-native" ],
  "summary": "Asserts that a given value meets a condition.",
  "testOn": "https://gravitymvctestapplication.azurewebsites.net"
}